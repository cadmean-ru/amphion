// Objective-C API for talking to github.com/cadmean-ru/amphion/common/atext Go package.
//   gobind -lang=objc github.com/cadmean-ru/amphion/common/atext
//
// File is generated by gobind. Do not edit.

#ifndef __Atext_H__
#define __Atext_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class AtextChar;
@class AtextFace;
@class AtextFont;
@class AtextGlyph;
@class AtextLayoutOptions;
@class AtextLine;
@class AtextText;
@protocol AtextProvider;
@class AtextProvider;

@protocol AtextProvider <NSObject>
- (AtextText* _Nullable)getAText;
@end

/**
 * Char is a representation of a character of text on the screen.
 */
@interface AtextChar : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetGlyph returns the Glyph for this character. Can return nil if the character is not associated with any Glyph.
 */
- (AtextGlyph* _Nullable)getGlyph;
// skipped method Char.GetPosition with unsupported parameter or return types

// skipped method Char.GetRect with unsupported parameter or return types

/**
 * GetRune returns the rune the char is associated with.
 */
- (int32_t)getRune;
// skipped method Char.GetSize with unsupported parameter or return types

/**
 * GetX return the x coordinate of the top-left position of the char.
 */
- (long)getX;
/**
 * GetY return the y coordinate of the top-left position of the char.
 */
- (long)getY;
/**
 * IsVisible tells if the character has a visual representation.
 */
- (BOOL)isVisible;
- (NSString* _Nonnull)string;
@end

/**
 * Face represents a font face, i.e. a font variant of the specific size.
 */
@interface AtextFace : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetAscent returns the ascent of this face.
 */
- (long)getAscent;
/**
 * GetCapHeight returns the height of capital letter in this face.
 */
- (long)getCapHeight;
/**
 * GetDescent returns the descent of this face.
 */
- (long)getDescent;
/**
 * GetFont returns the Font, that this face is associates with.
 */
- (AtextFont* _Nullable)getFont;
/**
 * GetGlyph creates a glyph i.e. a visual representation for the given rune.
 */
- (AtextGlyph* _Nullable)getGlyph:(int32_t)r;
/**
 * GetKerning returns the kerning between the two given runes.
 */
- (long)getKerning:(int32_t)r1 r2:(int32_t)r2;
/**
 * GetLineHeight returns the line height of this face.
 */
- (long)getLineHeight;
/**
 * GetSize returns the size of this font face.
 */
- (long)getSize;
/**
 * GetXHeight returns the xHeight of this face.
 */
- (long)getXHeight;
@end

/**
 * Font represents a true type font.
 */
@interface AtextFont : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get Name returns the name of the font.
 */
- (NSString* _Nonnull)getName;
/**
 * NewFace creates a new font face with the specifies size.
 */
- (AtextFace* _Nullable)newFace:(long)size;
@end

/**
 * Glyph is the visual representation of a rune.
 */
@interface AtextGlyph : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetAdvance returns the x advance of the glyph.
 */
- (long)getAdvance;
/**
 * GetAscent returns the ascent of the glyph.
 */
- (long)getAscent;
// skipped method Glyph.GetBearing with unsupported parameter or return types

/**
 * GetDescent returns the descent of the glyph.
 */
- (long)getDescent;
/**
 * GetFace returns the font face it is associated with.
 */
- (AtextFace* _Nullable)getFace;
- (long)getHeight;
/**
 * GetPixels returns the actual pixels of the glyph, that can be drawn to the screen.
 */
- (NSData* _Nullable)getPixels;
/**
 * GetRune returns the rune glyph is associated with.
 */
- (int32_t)getRune;
// skipped method Glyph.GetSize with unsupported parameter or return types

- (long)getWidth;
@end

@interface AtextLayoutOptions : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field LayoutOptions.VTextAlign with unsupported type: github.com/cadmean-ru/amphion/common/a.TextAlign

// skipped field LayoutOptions.HTextAlign with unsupported type: github.com/cadmean-ru/amphion/common/a.TextAlign

@property (nonatomic) BOOL singleLine;
@end

/**
 * Line represents a  single line of characters in the text.
 */
@interface AtextLine : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetCharAt returns the char at the given index.
Returns nil if index is out of bounds.
 */
- (AtextChar* _Nullable)getCharAt:(long)index;
/**
 * GetCharsCount returns the number of characters in this line.
 */
- (long)getCharsCount;
/**
 * GetHeight return the height of this line in pixels.
 */
- (long)getHeight;
// skipped method Line.GetSize with unsupported parameter or return types

/**
 * GetWidth returns the width of all characters in this line in pixels.
 */
- (long)getWidth;
/**
 * IsEmpty checks if this line has no characters.
 */
- (BOOL)isEmpty;
- (NSString* _Nonnull)string;
@end

/**
 * Text contains the layered out text. Read only.
 */
@interface AtextText : NSObject <goSeqRefInterface, AtextProvider> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method Text.ForEachChar with unsupported parameter or return types

- (AtextText* _Nullable)getAText;
// skipped method Text.GetActualRect with unsupported parameter or return types

// skipped method Text.GetAllChars with unsupported parameter or return types

/**
 * GetCharAt returns the character at the specified position in text.
 */
- (AtextChar* _Nullable)getCharAt:(long)index;
/**
 * GetCharsCount returns the total number of characters in the text.
 */
- (long)getCharsCount;
// skipped method Text.GetInitialRect with unsupported parameter or return types

- (AtextLine* _Nullable)getLineAt:(long)index;
- (long)getLinesCount;
// skipped method Text.GetSize with unsupported parameter or return types

- (NSString* _Nonnull)string;
@end

@interface Atext : NSObject
+ (NSData* _Nullable) defaultFontData;
+ (void) setDefaultFontData:(NSData* _Nullable)v;

@end

// skipped function LayoutRunes with unsupported parameter or return types


FOUNDATION_EXPORT AtextText* _Nullable AtextLayoutStringCompat(AtextFace* _Nullable face, NSString* _Nullable text, float minX, float maxX, float minY, float maxY, float minZ, float maxZ, long vTextAlign, long hTextAlign);

/**
 * ParseFont parses a true type font from the data.
 */
FOUNDATION_EXPORT AtextFont* _Nullable AtextParseFont(NSData* _Nullable fontData, NSError* _Nullable* _Nullable error);

@class AtextProvider;

@interface AtextProvider : NSObject <goSeqRefInterface, AtextProvider> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (AtextText* _Nullable)getAText;
@end

#endif
